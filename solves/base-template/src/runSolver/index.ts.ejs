import {
    type ClingoResult,
    runClingo,
} from "clingo-wrapper";

import {
    type ParsedSolutionSpecialCode as _ParsedSolutionSpecialCode,
    type ParsedSolution as _ParsedSolution,
    parseSolution,
} from "./parseSolution";

import {reConstant} from "../utils";

import logicSpecStr from "./logicSpec.lp";
import validationSpecStr from "./validationSpec.lp";

export type ParsedSolutionSpecialCode = _ParsedSolutionSpecialCode;
export type ParsedSolution = _ParsedSolution;

/*** ***/

interface GeneratedClingoFacts {
    clingoFacts:      ReadonlyMap<string, string>; // Map<clingo fact, constant tuple>
    invalidConstants: number[];
    invalidConstantTuples: Set<string>;
}

function generateClingoFacts(
    constantTuples:    string[],
    name:              string,
    lineGenFn:         (name: string, constantTuple: string) => string,
    expectedTupleSize: number,
): GeneratedClingoFacts {
    console.assert(name.match(reConstant));
    const clingoFacts: Map<string, string> = new Map();
    const invalidPairs: number[] = [];
    const invalidConstantTups: Set<string> = new Set();
    for (const [i, part] of constantTuples.entries()) {
        const substrs: string[] = part.split(",").map(s => s.trim());
        
        const isCorrectTupleSize = (substrs.length === expectedTupleSize);
        const allConstantsAreCorrectSyntax = substrs.every(x => x.match(reConstant));

        if (isCorrectTupleSize && allConstantsAreCorrectSyntax) {
            const fact: string = lineGenFn(name, substrs.join(","));
            console.assert(fact.replaceAll(/\s/g, "") == fact); // Should be no spaces
            clingoFacts.set(fact, part);
        } else {
            invalidPairs.push(i);
            invalidConstantTups.add(part);
        }
    }
    return {
        clingoFacts: clingoFacts,
        invalidConstants: invalidPairs,
        invalidConstantTuples: invalidConstantTups,
    };
}

function generateBaseDef(
    constants:         string[],
    name:              string,
    expectedTupleSize: number,
): GeneratedClingoFacts {
    return generateClingoFacts(
        constants,
        name,
        (n, t) => `base(${n},${t}).`,
        expectedTupleSize,
    );
}

function generateInstanceDef(
    constants:         string[],
    name:              string,
    expectedTupleSize: number,
): GeneratedClingoFacts {
    return generateClingoFacts(
        constants,
        name,
        (n, t) => `instance(${n}(${t})).`,
        expectedTupleSize,
    );
}

async function getConstantTuplesThatFailConstraints(
    problemInstance: string,
    constrainedFacts: ReadonlyMap<ConstrainedInputKeys, GeneratedClingoFacts>,
): Promise<Map<ConstrainedInputKeys, Set<string>>> {
    // Use Clingo to get all invalid facts
    const fullQuery = [
        problemInstance,
        validationSpecStr,
    ].join("\n\n");
    console.log(fullQuery);
    const result = await runClingo(fullQuery);

    if (result.solution === null) {
        throw new Error("runClingo() returned a null solution.");
    }

    // Create a set of invalid facts as strings, with whitespace removed
    const op = (x: string) => (x.replaceAll(/\s/g, "") + ".");
    const invalidFacts: Set<string> = new Set(result.solution.map(op));

    // Convert these invalid facts to constant tuples
    const ret: Map<ConstrainedInputKeys, Set<string>> = new Map(
        [...constrainedFacts].map(([inputID, {clingoFacts}]) => [
            inputID,
            new Set(
                [...clingoFacts]
                    .filter(([fact, _]) => invalidFacts.has(fact))
                    .map(([_, tup]) => tup)
            ),
        ])
    );
    return ret;
}

/*** ***/

export interface SolverParameters {
<%-
        Object.entries(allInputs).map(([k, v]) => {
            const x = {};
            x.inputID = k;
            return ht.paramType(x);
        }).join("")
-%>
}

export interface SolverResult {
    solution: ParsedSolution;
    invalidConstantTuples: Map<AllInputKeys, Set<string>>;
}

export async function runSolver(params: SolverParameters): Promise<SolverResult> {
    console.log("Running 'runSolver()'.");

    const baseFacts: ReadonlyMap<BaseInputKeys, GeneratedClingoFacts> = new Map([
<%-
        Object.entries(inputBase).map(([k, v]) => "        " +
            `["${k}", generateBaseDef(params.${k}, "${k}", ${v.parameters})],`
        ).join("\n")
%>
    ]);
    const constrainedFacts: ReadonlyMap<ConstrainedInputKeys, GeneratedClingoFacts> = new Map([
<%-
        Object.entries(inputConstrained).map(([k, v]) => "        " +
            `["${k}", generateInstanceDef(params.${k}, "${k}", ${v.parameters})],`
        ).join("\n")
%>
    ]);

    const problemInstance: string = [...baseFacts, ...constrainedFacts]
        .map(([_, v]) => [...v.clingoFacts.keys()].join("\n"))
        .join("\n");

    const constTupConstraintFailures: Map<AllInputKeys, Set<string>> = (
        await getConstantTuplesThatFailConstraints(
            problemInstance,
            constrainedFacts,
        )
    );

    const resultObj: null | ClingoResult = await (async()=>{
        const noInvalidConstantTups = [...baseFacts, ...constrainedFacts]
            .every(([_, v]) => (v.invalidConstantTuples.size === 0));
        const validAgainstConstraints = [...constTupConstraintFailures]
            .every(([_, v]) => (v.size === 0));

        if (noInvalidConstantTups && validAgainstConstraints) {
            const fullQuery = [
                problemInstance,
                logicSpecStr,
            ].join("\n\n");
            return runClingo(fullQuery);
        } else {
            return null;
        }
    })();

    const invalidConstantTuples: Map<AllInputKeys, Set<string>> = new Map(
        [...baseFacts, ...constrainedFacts].map(([inputID, factsObj]) => {
            const constTups = factsObj.invalidConstantTuples;
            const s = constTupConstraintFailures.get(inputID);
            if (s !== undefined) [...s].forEach(x => constTups.add(x));
            return [inputID, constTups];
        }),
    );
    return {
        solution: resultObj ? parseSolution(resultObj) : "invalid-input",
        invalidConstantTuples,
    };
}

