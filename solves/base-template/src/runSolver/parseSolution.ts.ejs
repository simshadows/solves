import {type ClingoResult} from "clingo-wrapper";

export type SatisfiableParsedSolution = {
    [K in OutputKeys]: string[][]; // Table of constants
}

export type ParsedSolutionSpecialCode = "no-solution"
    | "invalid-input"
    | "error";

export type ParsedSolution = SatisfiableParsedSolution | ParsedSolutionSpecialCode;

function solutionPartialRE(name: string) {
    return `solution\\(${name}\\((.+)\\)\\)`;
}

function parseSolutionStr(
    s: string,
    name: string,
    constantToOriginal: Map<string, string>,
): string[] {
    const reSolution = new RegExp(`^${solutionPartialRE(name)}$`, "g");
    const matches = [...s.matchAll(reSolution)];
    console.assert(matches.length <= 1); // Never have more than one match
    const match = matches[0];
    if (match === undefined) return [];
    const group = match[1];
    if (group === undefined) throw new Error("One capture group expected.");

    const op = (y: string) => {
        const z = constantToOriginal.get(y.trim());
        return (z === undefined) ? y : z;
    };
    return group.split(",").map(op);
}

export function parseSolution(
    result: ClingoResult,
    constantToOriginal: Map<string, string>,
): ParsedSolution {
    switch (result.result) {
        case "UNSATISFIABLE":
            return "no-solution";
        case "UNKNOWN":
            return "error";
        default: console.error("Invalid value."); // Fallthrough
        case "SATISFIABLE": // Fallthrough
    }

    const solution = result.solution;
    if (solution === null) {
        console.error("Expected non-null solution from Clingo.");
        return "error";
    }
    
    const op = (name: string) => (
        solution
            .map(x => parseSolutionStr(x, name, constantToOriginal))
            .filter(x => x.length)
    );

    return {
<%-
        Object.entries(output).map(([k, v]) => "        " +
            `${k}: op(${safeString(k)}),`
        ).join("\n")
%>
    };
}

