import React from "react";

<%-
(!Object.keys(inputInteger).length) ? "" :
`import {IntegerInput} from "./IntegerInput";\n`
-%>
<%-
(!Object.keys(allTextInputs).length) ? "" :
`import {TextAreaInput} from "./TextAreaInput";\n`
-%>
import {ResultDisplay} from "./ResultDisplay";
import {ResultDisplayDoubleGrouped} from "./ResultDisplayDoubleGrouped";
ResultDisplay;
ResultDisplayDoubleGrouped;

import {
    type ParsedSolution,
    runSolver,
} from "../runSolver";

import "./App.css";


function parseInput(s: string): string[] {
    return s.split("\n");
}

interface State {
<%-
        Object.entries(allTextInputs).map(([k, v]) => "    " +
            `input${upperCaseFirst(k)}: string;`
        ).join("\n")
%>
<%-
        Object.entries(allNumericInputs).map(([k, v]) => "    " +
            `input${upperCaseFirst(k)}: number;`
        ).join("\n")
%>

    solution: ParsedSolution | "not-initialized";
    invalidInputs: Map<AllInputKeys, Set<string>>;
}

export class App extends React.Component<{}, State> {
    constructor(props: {}) {
        super(props);
        this.state = {
            // TODO: This is NOT the source of truth for input values. This input
            //       value state should technically no longer exist, and we should
            //       instead set up refs to read directly from their uncontrolled
            //       textboxes. However, I'm going to be looking into ways to turn
            //       LineHighlighterTextbox into a controllable component.
            //
            //       Either implement a proper uncontrolled
            //       component, or improve LineHighlighterTextbox into a
            //       controllable component!
<%-
            Object.entries(allTextInputs).map(([k, v]) => "            " +
                `input${upperCaseFirst(k)}: ${safeString(v.initialValues.join("\n"))},`
            ).join("\n")
%>
<%-
            Object.entries(allNumericInputs).map(([k, v]) => "            " +
                `input${upperCaseFirst(k)}: ${v.initial},`
            ).join("\n")
%>

            solution: "not-initialized",
            invalidInputs: new Map(),
        };
    }

    async _recalculateOutputs() {
        const result = await runSolver({
<%-
            Object.entries(allTextInputs).map(([k, v]) =>
                "            " +
                `${k}: parseInput(this.state.input${upperCaseFirst(k)}),`
            ).join("\n")
%>
<%-
            Object.entries(inputInteger).map(([k, v]) =>
                "            " +
                `${k}: this.state.input${upperCaseFirst(k)},`
            ).join("\n")
%>
        });
        this.setState({
            solution:      result.solution,
            invalidInputs: result.invalidConstantTuples,
        });
    }

    override async componentDidMount() {
        await this._recalculateOutputs();
    }

    override render() {
        const recalcCallback = async () => this._recalculateOutputs();

<%-
        Object.entries(allTextInputs).map(([k, v]) => {
            const x = {};
            x.stateValue = "input" + upperCaseFirst(k);
            x.onChangeFnName = "set" + upperCaseFirst(k);
            return ht.onChangeHelper(x);
        }).join("")
-%>
<%-
        Object.entries(allNumericInputs).map(([k, v]) => {
            const x = {};
            x.stateValue = "input" + upperCaseFirst(k);
            x.onChangeFnName = "set" + upperCaseFirst(k);
            return ht.onChangeHelperNumeric(x);
        }).join("")
-%>

        return <div id="app">
            <div id="app-title">
                <h1><%= appTitle -%></h1>
            </div>
<%-
                Object.entries(allTextInputs).map(([k, v]) => {
                    const x = {};
                    x.inputID = k;
                    x.label = v.title;
                    return ht.jsxInputComponent(x);
                }).join("")
-%>
<%_ if (Object.keys(inputInteger).length) { -%>
            <div className="input-wrapper">
<%-
                Object.entries(inputInteger).map(([k, v]) => {
                    const x = {};
                    x.inputID = k;
                    x.title = v.title;
                    x.min = v.min;
                    x.max = v.max;
                    return ht.jsxInputIntegerComponent(x);
                }).join("")
-%>
            </div>
<%_ } -%>
        <ResultDisplayDoubleGrouped
            fieldLabels={["Round", "Group", "Players"]}
            solutionData={
                (typeof this.state.solution === "string")
                ? this.state.solution
                : this.state.solution.assign
            }
        />
<%-
                Object.entries(output).map(([k, v]) => {
                    const x = {};
                    x.outputID = k;
                    x.fieldLabels = v.fields.map(y => y.label);
                    return ht.jsxOutputComponent(x);
                }).join("")
-%>
        </div>;
    }
}

