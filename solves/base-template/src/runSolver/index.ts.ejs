import {
    type ClingoResult as _ClingoResult,
    runClingo,
} from "clingo-wrapper";

import logicSpecStr from "./logicSpec.lp";
import validationSpecStr from "./validationSpec.lp";

export type ClingoResult = _ClingoResult;

const reConstant = /^[a-z][a-zA-Z0-9]*$/;

function mergeIndexLists(a: number[], b: number[]): number[] {
    const indexSet: Set<number> = new Set<number>(a.concat(b));
    return Array.from(indexSet);
}

/*** ***/

interface GeneratedClingoFacts {
    clingoFacts:      string[];
    invalidConstants: number[];
}

function generateBaseDef(constants: string[], name: string): GeneratedClingoFacts {
    console.assert(name.match(reConstant));
    const clingoFacts: string[] = [];
    const invalidConstants: number[] = [];
    for (const [i, constant] of constants.entries()) {
        if (constant.match(reConstant)) { // Syntax validation
            clingoFacts.push(`base(${name}, ${constant}).`);
        } else {
            // Placeholder string added to preserve index correspondence
            clingoFacts.push("");
            invalidConstants.push(i);
        }
    }
    return {
        clingoFacts: clingoFacts,
        invalidConstants: invalidConstants,
    };
}

function generateInstDef(constantPairs: string[], name: string): GeneratedClingoFacts {
    console.assert(name.match(reConstant));
    const clingoFacts: string[] = [];
    const invalidPairs: number[] = [];
    for (const [i, part] of constantPairs.entries()) {
        const substrs = part.split(",").map((s) => s.trim());
        const isValidSyntax = (substrs.length === 2)
                              && (substrs[0]?.match(reConstant))
                              && (substrs[1]?.match(reConstant));
        if (isValidSyntax) {
            clingoFacts.push(`instance(${name}(${substrs[0]}, ${substrs[1]})).`);
        } else {
            // Placeholder string added to preserve index correspondence
            clingoFacts.push("");
            invalidPairs.push(i);
        }
    }
    return {
        clingoFacts: clingoFacts,
        invalidConstants: invalidPairs,
    };
}

async function getInvalidEdgeFacts(
    requiredFacts: string,
    edgeFacts: string[],
): Promise<number[]> {

    const invalidIndices: number[] = [];
    for (const [i, edgeFact] of edgeFacts.entries()) {
        const fullQuery = [
            requiredFacts,
            edgeFact,
            validationSpecStr,
        ].join("\n\n");
        const result = await runClingo(fullQuery);
        if (result.result !== "SATISFIABLE") {
            invalidIndices.push(i);
        }
    }
    return invalidIndices;
}

/*** ***/

export interface SolverParameters {
<%-
        Object.entries({...inputBase, ...inputConstrained}).map(([k, v]) => {
            const x = {};
            x.inputID = k;
            return ht.paramType(x);
        }).join("")
-%>
}

export interface SolverResult {
    // Clingo-specific output.
    // TODO: Make SolverResult backend-agnostic!
    resultObj: null | ClingoResult;
    invalidInputs: {
        // These are lists of integers, where each integer is an index of
        // an invalid string within the corresponding input list.
<%-
        Object.entries({...inputBase, ...inputConstrained}).map(([k, v]) => {
            const x = {};
            x.inputID = k;
            return ht.resultType(x);
        }).join("")
-%>
    };
}

export async function runSolver(params: SolverParameters): Promise<SolverResult> {
    console.log("Running 'runSolver()'.");
    const colourFacts = generateBaseDef(params.colour, "colour");
    const vertexFacts = generateBaseDef(params.vertex, "vertex");
    const edgeFacts = generateInstDef(params.edge, "edge");

    const colourAndVertexFacts = [
        colourFacts.clingoFacts.join("\n"),
        vertexFacts.clingoFacts.join("\n"),
    ].join("\n\n");

    const invalidEdgeFactIndices: number[] = await getInvalidEdgeFacts(
        colourAndVertexFacts,
        edgeFacts.clingoFacts,
    );

    const totalInvalidEdgeFacts: number[] = mergeIndexLists(
        edgeFacts.invalidConstants,
        invalidEdgeFactIndices,
    );

    const resultObj: null | ClingoResult = await (async()=>{
        const inputsValid = (colourFacts.invalidConstants.length == 0)
                            && (vertexFacts.invalidConstants.length == 0)
                            && (edgeFacts.invalidConstants.length == 0)
                            && (invalidEdgeFactIndices.length === 0);

        if (inputsValid) {
            const fullQuery = [
                colourAndVertexFacts,
                edgeFacts.clingoFacts.join("\n"),
                logicSpecStr,
            ].join("\n\n");
            return runClingo(fullQuery);
        } else {
            return null;
        }
    })();

    return {
        resultObj: resultObj,
        invalidInputs: {
            colour:  colourFacts.invalidConstants,
            vertex:  vertexFacts.invalidConstants,
            edge:    totalInvalidEdgeFacts,
        },
    };
}

