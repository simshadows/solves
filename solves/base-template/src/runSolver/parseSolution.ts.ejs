import {type ClingoResult} from "clingo-wrapper";

export type SatisfiableParsedSolution = {
    [K in OutputKeys]: string[][]; // Table of constants
}

export type ParsedSolutionSpecialCode = "no-solution"
    | "invalid-input"
    | "error";

export type ParsedSolution = SatisfiableParsedSolution | ParsedSolutionSpecialCode;

function solutionPartialRE(name: string) {
    return `solution\\(${name}\\(([^,]+)(?:,([^,]+))*\\)\\)`;
}

function parseSolutionStr(s: string, name: string): string[] {
    console.log(s);
    const reSolution = new RegExp(`^${solutionPartialRE(name)}$`, "g");
    const matches = [...s.matchAll(reSolution)];
    console.log(matches);
    console.assert(matches.length <= 1); // Never have more than one match
    return matches[0]?.slice(1) || []; // First match, with first element removed
}

export function parseSolution(result: ClingoResult): ParsedSolution {
    switch (result.result) {
        case "UNSATISFIABLE":
            return "no-solution";
        case "UNKNOWN":
            return "error";
        default: console.error("Invalid value."); // Fallthrough
        case "SATISFIABLE": // Fallthrough
    }

    const solution = result.solution;
    if (solution === null) {
        console.error("Expected non-null solution from Clingo.");
        return "error";
    }
    
    const op = (name: string) => (
        solution
            .map(x => parseSolutionStr(x, name))
            .filter(x => x.length)
    );

    return {
<%-
        Object.entries(output).map(([k, v]) => "        " +
            `${k}: op("${k}"),`
        ).join("\n")
%>
    };
}

