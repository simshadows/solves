import React from "react";

import "./App.css";

import {LineHighlighterTextbox} from "./generic/LineHighlighterTextbox";
import {ResultDisplay} from "./ResultDisplay";

import {
    type ClingoResult,
    runSolver
} from "../runSolver";

function parseInput(s: string): string[] {
    return s.split("\n");
}

interface State {
    initialized: boolean;

<%-
        Object.entries({...inputBase, ...inputConstrained}).map(([k, v]) => {
            const x = {};
            x.inputID = k;
            return ht.stateTypeInputValue(x);
        }).join("")
-%>

    outputResult: null | ClingoResult;
    invalidInputLines: {
<%-
        Object.entries({...inputBase, ...inputConstrained}).map(([k, v]) => {
            const x = {};
            x.inputID = k;
            return ht.stateTypeInputValidation(x);
        }).join("")
-%>
    };
}

export class App extends React.Component<{}, State> {
    constructor(props: {}) {
        super(props);
        this.state = {
            initialized: false,

            // TODO: This is NOT the source of truth for input values. This input
            //       value state should technically no longer exist, and we should
            //       instead set up refs to read directly from their uncontrolled
            //       textboxes. However, I'm going to be looking into ways to turn
            //       LineHighlighterTextbox into a controllable component.
            //
            //       Either implement a proper uncontrolled
            //       component, or improve LineHighlighterTextbox into a
            //       controllable component!
<%-
            Object.entries({...inputBase, ...inputConstrained}).map(([k, v]) => {
                const x = {};
                x.inputID = k;
                x.initialValues = v.initialValues;
                return ht.stateInputValue(x);
            }).join("")
-%>

            outputResult: null,
            invalidInputLines: {
<%-
            Object.entries({...inputBase, ...inputConstrained}).map(([k, v]) => {
                const x = {};
                x.inputID = k;
                x.initialValues = v.initialValues;
                return ht.stateInputValidation(x);
            }).join("")
-%>
            },
        };
    }

    async _recalculateOutputs() {
        const result = await runSolver({
<%-
        Object.entries({...inputBase, ...inputConstrained}).map(([k, v]) => {
            const x = {};
            x.inputID = k;
            return ht.resultParameter(x);
        }).join("")
-%>
        });
        this.setState({
            initialized:       true,
            outputResult:      result.resultObj,
            invalidInputLines: result.invalidInputs,
        });
    }

    override async componentDidMount() {
        await this._recalculateOutputs();
    }

    override render() {
        const recalcCallback = async () => this._recalculateOutputs();

<%-
        Object.entries({...inputBase, ...inputConstrained}).map(([k, v]) => {
            const x = {};
            x.stateValue = "input" + upperCaseFirst(k);
            x.onChangeFnName = "set" + upperCaseFirst(k);
            return ht.onChangeHelpers(x);
        }).join("")
-%>

        return <div id="app">
<%-
                Object.entries({...inputBase, ...inputConstrained}).map(([k, v]) => {
                    const x = {};
                    x.title = v.title;
                    x.stateValue = "input" + upperCaseFirst(k);
                    x.stateValidation = k;
                    x.onChangeFnName = "set" + upperCaseFirst(k);
                    return ht.jsxParts(x);
                }).join("")
-%>
            <div className="output-table-wrapper">
                <ResultDisplay
                    clingoResult={this.state.outputResult}
                    initialized={this.state.initialized}
                />
            </div>
        </div>;
    }
}

